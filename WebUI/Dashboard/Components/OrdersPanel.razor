@using Domain.Enums
@inject IJSRuntime JS
@inject IOrderAdminService OrderAdminService

<h2>📦 Pending Orders</h2>
<div class="orders-table">
    <div class="order-row header">
        <div>ID</div>
        <div>Customer</div>
        <div>Total</div>
        <div>Status</div>
        <div>Date</div>
        <div>Action</div>
    </div>

    @if (orders != null)
    {
        foreach (var order in orders)
        {
            <div class="order-row">
                <div data-label="ID">@order.OrderNumber</div>
                <div data-label="Customer">@(order.Location?.Name ?? "Guest")</div>
                <div data-label="Total">@order.Subtotal EGP</div>
                <div data-label="Status" class="status pending">@order.OrderStatus</div>
                <div data-label="Date">@order.CreatedAt.ToString("hh:mm tt, dddd, MMMM yyyy")</div>
                <div data-label="Action" class="action-cell">
                    <div class="action-menu">
                        ⋮
                        <div class="dropdown">
                            <a href="@($"/Admin/Order/Details/{order.Id}")">View Order</a>
                            <button class="dropdown-action accept"
                                    @onclick="(e) => AcceptOrder(OrderStatus.Accepted, order.Id)"
                                    @onclick:stopPropagation="true">
                                Accept
                            </button>

                            <button class="dropdown-action reject"
                                    @onclick="(e) => ConfirmReject(order.Id)"
                                    @onclick:stopPropagation="true">
                                Reject
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="divider"></div>
        }
    }
    else
    {
        <p>Loading orders...</p>
    }    
</div>

@code {

    private IEnumerable<OrderDto> orders;
    private bool dataLoaded = false;
    private bool _jsInitialized = false;

    private async Task ConsoleLog()
    {
        await JS.InvokeVoidAsync("console.log", "Hello");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_jsInitialized && dataLoaded)
        {
            _jsInitialized = true;
            await JS.InvokeVoidAsync("setupActionMenus");
        }
    }

    protected override async Task OnInitializedAsync()
    {        
        var allOrders = await OrderAdminService.GetAllOrdersAsync();
        orders = allOrders
            .Where(o => o.OrderStatus == OrderStatus.Pending.ToString())
            .ToList();

        dataLoaded = true;
    }

    private async Task AcceptOrder(OrderStatus orderStatus, Guid orderId)
    {
        await OrderAdminService.UpdateOrderStatusAsync(orderId , orderStatus);
        await JS.InvokeVoidAsync("showToast", "Order accepted successfully!");

        orders = orders.Where(o => o.Id != orderId).ToList();
        StateHasChanged();
    }

    private async Task ConfirmReject(Guid orderId)
    {
        var confirmed = await JS.InvokeAsync<bool>("showRejectConfirmation");

        if (confirmed)
        {
            await OrderAdminService.UpdateOrderStatusAsync(orderId, OrderStatus.Rejected);
            await JS.InvokeVoidAsync("showToast", "Order rejected.");

            orders = orders.Where(o => o.Id != orderId).ToList();
            StateHasChanged();            
        }
    }

}