@inject IOrderAdminService OrderService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (order is not null)
{
    <div class="order-cards-container">
    <div class="order-card">
        <h3>Items</h3>
        <ul>
            @foreach (var item in order.Items)
            {
                <li>@item.ProductName × @item.Quantity  <i class="fa-solid fa-eye" @onclick="(() => NavigateToProductView(item.ProductId))"></i></li>
            }
        </ul>
    </div>

    <!-- Location/Shipping Card -->
    <div class="order-card">
        <h3>Shipping Info</h3>
        <p><strong>Name:</strong> @(order.Location?.Name ?? "Unknown")</p>
        <p><strong>Address:</strong> @(order.Location?.Address ?? "") @(order.Location?.StreetAddress ?? "")</p>
        <p><strong>Phone:</strong> @(order.Location?.PhoneNumber1 ?? "N/A")</p>
        <p><strong>Created Date:</strong> @order.CreatedAt.ToString("MMMM d, yyyy")</p>
    </div>

    <!-- Total & Invoice Card -->
    <div class="order-card">
        <h3>Order Summary</h3>
        <p><strong>Order Date:</strong> @order.CreatedAt.ToString("MMMM d, yyyy")</p>
        <p>
            <strong>Status:</strong>
            <span class="status @(order.OrderStatus.ToLower())">
                @order.DeliveryStatus
            </span>
        </p>
        <p><strong>Delivery Method:</strong> @order.PaymentStatus</p>
        <p><strong>Total:</strong> $@order.Total EGP</p>
        <div class="invoice-button">
            @if (order?.Location?.Latitude != null && order.Location.Longitude != null)
            {
                <button class="btn location" @onclick="@(() => GetLocationLink(order.Location.Latitude, order.Location.Longitude))">
                    Copy Location
                </button>
                <button class="copy-btn" @onclick="@(() => CopyToClipboard(order.Location.Latitude, order.Location.Longitude))" title="Copy Link">
                    📋
                </button>
            }
            
            <button class="btn btn-primary" @onclick="@(() => DownloadInvoice(order.Id))">
                Download Invoice
            </button>
        </div>
    </div>
    </div>
}
else
{
    <p>Loading order...</p>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }
    private OrderDto order = new();

    protected override async Task OnInitializedAsync()
    {        
        await LoadOrderDetailsAsync(OrderId);
    }

    private async Task LoadOrderDetailsAsync(Guid orderId)
    {
        order = await OrderService.GetOrderByIdAsync(orderId);
    }


    private async Task DownloadInvoice(Guid id)
    {
        var url = $"https://localhost:7201/api/ordersadmin/orders/{id}/invoice";
        await JS.InvokeVoidAsync("open", url, "_blank"); // opens the PDF in a new tab
    }

    private void NavigateToProductView(Guid productId)
    {
        NavigationManager.NavigateTo($"/Product/View/{productId}");
    }

    private void GetLocationLink(decimal? la, decimal? lo)
    {
        NavigationManager.NavigateTo($"https://www.google.com/maps?q={la},{lo}");
    }

    private async Task CopyToClipboard(decimal? la, decimal? lo)
    {
        var link = $"https://www.google.com/maps?q={la},{lo}";

        await JS.InvokeVoidAsync("copyTextToClipboard", link);
    }
}