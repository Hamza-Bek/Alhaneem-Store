@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Application.Dtos.Product
@using Application.Services
@using Domain.Enums
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IProductAdminService AdminService

<h2>@(IsEditMode ? "Edit Product" : "Add New Product")</h2>

<EditForm Model="ProductModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="ProductModel.Name" class="form-control" placeholder="Enter product name" required />
    </div>

    <div class="form-group">
        <label for="desc">Description</label>
        <InputTextArea id="desc" @bind-Value="ProductModel.Description" class="form-control" rows="3" placeholder="Product description (optional)" />
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="ProductModel.CategoryId" class="form-control" required>
            <option value="">-- Select a category --</option>
            @foreach (var category in AllCategories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="price">Price ($)</label>
        <InputNumber id="price" @bind-Value="ProductModel.Price" class="form-control" step="0.01" placeholder="0.00" required />
    </div>

    <div class="form-group">
        <label for="cost">Cost ($)</label>
        <InputNumber id="cost" @bind-Value="ProductModel.Cost" class="form-control" step="0.01" placeholder="0.00" />
    </div>

    <div class="form-group">
        <label for="stock">Stock Quantity</label>
        <InputNumber id="stock" @bind-Value="ProductModel.Stock" class="form-control" placeholder="Enter available stock" required />
    </div>

    <div class="form-group">
        <label for="stockStatus">Stock Status</label>
        <InputSelect id="stockStatus" @bind-Value="ProductModel.StockStatus" class="form-control" required>
            <option value="">-- Select --</option>
            @foreach (var status in StockStatusOptions)
            {
                <option value="@status">@GetDisplayName(status)</option>
            }
        </InputSelect>
    </div>

    <div class="file-upload-form">
        <label class="file-upload-label" for="fileInput">
            <div class="file-upload-design">
                <svg height="1em" viewBox="0 0 640 512">
                    <path d="..." />
                </svg>
                <p>Drag and Drop</p>
                <p>or</p>
                <span class="browse-button">Browse file</span>
            </div>
            <InputFile OnChange="HandleFiles" id="fileInput" multiple accept="image/*" style="display:none;" />
        </label>
    </div>

    <div id="preview" class="preview-container">
        @foreach (var preview in imagePreviews)
        {
            <img src="@preview" width="100" height="100" style="margin:5px;" />
        }
    </div>

    <button type="submit" class="upload-button">@((IsEditMode ? "Update Product" : "Add Product"))</button>
</EditForm>

<script>
    window.selectedImages = [];

    window.setupImageSelector = function () {
        const fileInput = document.getElementById("file");
        const preview = document.getElementById("preview");

        if (!fileInput || !preview) return;
        if (fileInput.dataset.initialized) return;
        fileInput.dataset.initialized = "true";

        fileInput.addEventListener("change", () => {
            const files = Array.from(fileInput.files);

            files.forEach(file => {
                if (file && file.type.startsWith("image/")) {
                    const alreadyExists = window.selectedImages.some(
                        f => f.name === file.name && f.size === file.size
                    );
                    if (alreadyExists) return;

                    window.selectedImages.push(file);

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = document.createElement("img");
                        img.src = e.target.result;
                        preview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                }
            });

            fileInput.value = '';
        });
    };
</script>

@code {
    [Parameter]
    public ProductDto? ExistingProduct { get; set; }

    private ProductDto ProductModel { get; set; } = new();
    private IEnumerable<StockStatus> StockStatusOptions => Enum.GetValues(typeof(StockStatus)).Cast<StockStatus>();
    private bool IsEditMode { get; set; } = false;
    private IReadOnlyList<IBrowserFile>? selectedFiles;
    private List<string> imagePreviews = new();
    private List<(string Name, string ContentType, Stream Content)> uploadedStreams = new();
    private List<CategoryDto> AllCategories = new();

    protected override async Task OnInitializedAsync()
    {
        AllCategories = await AdminService.GetAllCategoriesAsync();
    }

    protected override void OnParametersSet()
    {
        if (ExistingProduct != null)
        {
            ProductModel = new ProductDto
            {
                Id = ExistingProduct.Id,
                Name = ExistingProduct.Name,
                Description = ExistingProduct.Description,               
                CategoryId = ExistingProduct.CategoryId,
                Price = ExistingProduct.Price,
                Cost = ExistingProduct.Cost,
                Stock = ExistingProduct.Stock,
                StockStatus = ExistingProduct.StockStatus
            };

            IsEditMode = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupImageSelector");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEditMode)
        {
            ProductModel.Id = Guid.NewGuid();
            var id = "3fa85f64-5717-4562-b3fc-2c963f66afa6";
            ProductModel.CategoryId = Guid.Parse(id);
            var addedProduct = await AdminService.CreateProductAsync(ProductModel);
            if (addedProduct != null)
            {
                Console.WriteLine("Product added successfully!");
                await UploadImages(); // optional: upload after creating
                ResetForm();
            }
        }
        else
        {
            var result = await AdminService.UpdateProductAsync(ProductModel.Id, ProductModel);
            
            await JS.InvokeVoidAsync("showToast", "Product Updated!", "success");
            NavigationManager.NavigateTo("/Admin/Products");
            await UploadImages(); // optional: upload after update
            
        }
    }

    private async void HandleFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        imagePreviews.Clear();
        uploadedStreams.Clear();

        foreach (var file in selectedFiles)
        {
            using var stream = file.OpenReadStream(10_000_000);
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer, 0, (int)file.Size);
            var base64 = Convert.ToBase64String(buffer);
            imagePreviews.Add($"data:{file.ContentType};base64,{base64}");
        }

        StateHasChanged();
    }

    private async Task UploadImages()
    {
        if (selectedFiles == null || selectedFiles.Count == 0)
            return;

        var success = await AdminService.UploadProductImagesAsync(ProductModel.Id, selectedFiles);
        if (success)
        {
            Console.WriteLine("Images uploaded!");
        }
        else
        {
            Console.WriteLine("Image upload failed.");
        }
    }

    private void ResetForm()
    {
        ProductModel = new ProductDto();
        imagePreviews.Clear();
        selectedFiles = null;
        uploadedStreams.Clear();
        IsEditMode = false;
        StateHasChanged();
    }

    private string GetDisplayName(Enum enumValue)
    {
        return enumValue.GetType()
            .GetMember(enumValue.ToString())
            .FirstOrDefault()?
            .GetCustomAttribute<DisplayAttribute>()?
            .Name ?? enumValue.ToString();
    }

    public async Task RefreshCategoriesAsync()
    {
        AllCategories = await AdminService.GetAllCategoriesAsync();
        StateHasChanged();
    }
}
