@inject IProductAdminService ProductService
@inject IAdminService AdminService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h2>Product List</h2>
<div class="table-wrapper">
    <table class="product-table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Description</th>
                <th>Price</th>
                <th>Cost</th>
                <th>Category</th>
                <th>Published</th>
                <th>Added At</th>                
                <th>Stock</th>
                <th>Stock Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in products)
            {
                <tr>
                    <td data-label="Image"><img src="@product.ImageUrls.FirstOrDefault()" alt="Product" class="product-img" /></td>
                    <td data-label="Title">@product.Name</td>
                    <td data-label="Description">@string.Join(" ", product.Description?.Split(' ').Take(2) ?? Enumerable.Empty<string>())</td>
                    <td data-label="Price">@product.Price</td>
                    <td data-label="Cost">@product.Cost</td>
                    <td data-label="Category">@product.CategoryName</td>
                    <td data-label="Published">@product.isPublished</td>
                    <td data-label="Added At">@product.CreatedAt</td>                    
                    <td data-label="Stock">@product.Stock</td>
                    <td data-label="Stock Status"><span class="status in-stock">@product.StockStatus</span></td>
                    <td data-label="Actions">
                        <div class="action-buttons">                            
                            <button class="view" @onclick="@( () => NavigateToProductView(product.Id))">View</button>
                            <button class="edit" @onclick="@(() => EditProduct(product.Id))">Edit</button>
                            <button class="delete" @onclick="() => ShowPopup(product.Id)">Sell</button>
                        </div>
                    </td>
                </tr>
            }          
        </tbody>
    </table>
</div>


@if (showCard)
{
    <div class="modal-overlay" @onclick="ClosePopup">
        <div class="modal-card" @onclick:stopPropagation>
            <h3>Enter Quantity</h3>
            <input type="number" @bind="integerValue" class="input-box" />
            <button class="submit-btn" @onclick="HandleSubmit">Submit</button>
            <button class="close-btn" @onclick="ClosePopup">Cancel</button>
        </div>
    </div>
}

@code{
    private List<ProductDto> products = new();
    private bool showCard = false;
    private int integerValue;
    private Guid selectedProductId;

    private void ShowPopup(Guid productId)
    {
        selectedProductId = productId;
        showCard = true;
    }

    private void ClosePopup()
    {
        showCard = false;
        integerValue = 0;
        selectedProductId = Guid.Empty;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        var request = new SellProductRequest
        {
            ProductId = selectedProductId,
            Quantity = integerValue
        };

        var isSold = await AdminService.SellProductAsync(request);

        if (isSold)
        {            
            var product = products.FirstOrDefault(p => p.Id == selectedProductId);
            if (product is not null)
            {
                product.Stock -= integerValue;                
            }
            await JS.InvokeVoidAsync("showToast", "Product sold successfully", "success");
        }
        else
        {
            await JS.InvokeVoidAsync("showToast", "Failed to sell product", "error");
        }

        ClosePopup();
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
    }

    private void EditProduct(Guid productId)
    {
        NavigationManager.NavigateTo($"/Admin/Products/Edit/{productId}");
    }

    private async Task DeleteProduct(Guid productId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirmed)
        {
            var result = await ProductService.DeleteProductAsync(productId);
            if (result)
            {
                // Remove from local list to reflect UI
                var deletedProduct = products.FirstOrDefault(p => p.Id == productId);
                if (deletedProduct is not null)
                    products.Remove(deletedProduct);

                StateHasChanged(); // Refresh UI
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to delete product.");
            }
        }
    }


    private void NavigateToProductView(Guid productId)
    {
        NavigationManager.NavigateTo($"/Product/View/{productId}");
    }
}               