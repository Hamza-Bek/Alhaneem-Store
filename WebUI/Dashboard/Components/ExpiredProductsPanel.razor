@using Application.Dtos.Product
@using Domain.Models
@inject IProductAdminService ProductService

<div class="product-card expired">
    <h3>❌ Expired Products</h3>
    <ul>
        @if (expiredProducts == null || !expiredProducts.Any())
        {
            <li>No expired products found.</li>
        }
        else
        {
            @foreach (var product in expiredProducts)
            {
                <li>
                    <img src="@product.ImageUrls.FirstOrDefault()" alt="Milk" class="product-img" />
                    <span class="separator">|</span>
                    <span class="product-name">@product.Name</span>
                    <span class="separator">|</span>
                    <span class="product-price" dir="ltr">@product.Price EGP</span>
                </li>
            }
        }     
    </ul>
</div>

<div class="product-card recent">
    <h3>🆕 Recently Added</h3>
    <ul>
        @if (expiredProducts == null)
        {
            <li>No expired products found.</li>
        }
        else
        {
            @foreach (var product in recentProducts)
            {
                <li>
                    <img src="@product.ImageUrls.FirstOrDefault()" alt="Milk" class="product-img" />
                    <span class="separator">|</span>
                    <span class="product-name">@product.Name</span>
                    <span class="separator">|</span>
                    <span class="product-price" dir="ltr">@product.Price EGP</span>
                </li>
            }
        }
    </ul>
</div>

@code{
    private List<ProductDto> expiredProducts = new List<ProductDto>();
    private List<ProductDto> recentProducts = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        expiredProducts = await ProductService.GetExpiredProductsAsync();
        recentProducts = await ProductService.GetRecentlyAddedProductsAsync();
    }

}           