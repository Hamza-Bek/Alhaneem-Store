@page "/Product/View/{productId:guid}"
@using Application.Dtos.Product
@using WebUI.Site.Components
@inject ICartService CartService
@inject IProductService ProductService
@inject IJSRuntime JS

<div class="main">
@if (product is not null)
{
    <div class="product-view-container">
        <!-- LEFT: Gallery -->
        <div class="product-gallery">
            <div class="main-image">
                <img id="mainProductImage" src="@product.ImageUrls.FirstOrDefault()" alt="Main Product Image">
            </div>
            <div class="thumbnail-row">
                @foreach (var imageUrl in product.ImageUrls)
                {
                    <img src="@imageUrl" alt="Thumbnail" class="thumbnail" onclick="changeImage(this)">
                }
            </div>
        </div>

        <!-- RIGHT: Info -->
        <div class="product-info">
            <h1 class="product-title">@product.Name</h1>
            <p class="product-description">
                @product.Description
            </p>
            <p class="product-price">@product.Price EGP</p>
             <button class="add-to-cart-btn" @onclick="() => AddToCart(product.Id)">
                        Add to Cart
                    </button>
        </div>
    </div>
}
</div>

<script>
    function changeImage(thumb) {
        const mainImage = document.getElementById("mainProductImage");
        mainImage.src = thumb.src;

        // Remove active from all thumbnails
        document.querySelectorAll(".thumbnail").forEach(img => {
            img.classList.remove("active-thumb");
        });

        // Add active to the clicked one
        thumb.classList.add("active-thumb");
    }

    // Optional: set initial active thumbnail on page load
    window.addEventListener("DOMContentLoaded", () => {
        const initialThumb = document.querySelector(".thumbnail");
        if (initialThumb) {
            initialThumb.classList.add("active-thumb");
        }
    });
</script>

@code {
    [Parameter]
    public Guid productId { get; set; }
    private string? sessionId;
    private PublicProductDto product;

    protected override async Task OnInitializedAsync()
    {        
        sessionId = await JS.InvokeAsync<string>("sessionHelper.getSessionId");

        if (string.IsNullOrWhiteSpace(sessionId))
        {
            sessionId = Guid.NewGuid().ToString();
            await CartService.CreateCartAsync(sessionId);
            await JS.InvokeVoidAsync("sessionHelper.setSessionId", sessionId);
        }

        product = await ProductService.GetProductById(productId);       
    }

    private async Task AddToCart(Guid productId)
    {
        if (sessionId is null)
            return;

        var response = await CartService.UpdateItemQuantityAsync(productId, 1, sessionId);

        await JS.InvokeVoidAsync("showToast", "Added Successfully", "success");
    }
}
