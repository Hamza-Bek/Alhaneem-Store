@using Application.Dtos.Product
@inject IJSRuntime JS
@inject IProductService ProductService

<div class="swiper product-swiper">
    <div class="swiper-wrapper">
        @foreach (var product in products)
        {            
            <div class="swiper-slide product-item">
                <img src="@product.ImageUrls.FirstOrDefault()" alt="@product.Name" class="product-image">
                <h3>@product.Name</h3>
                <p>@product.Price EGP</p>

                <div class="quantity-controls">
                    <button><i class="fas fa-minus"></i></button>
                    <span>0</span>
                    <button><i class="fas fa-plus"></i></button>
                </div>
            </div>
        }
    </div>

    <!-- Navigation arrows -->
    <div class="swiper-button-prev">
        <i class="fa-solid fa-arrow-left"></i>
    </div>
    <div class="swiper-button-next">
        <i class="fa-solid fa-arrow-right"></i>
    </div>
</div>

@code {  
    [Parameter]
    public string SliderType { get; set; } = "newest"; // Or use an enum for safety

    private List<PublicProductDto> products = new();

    protected override async Task OnInitializedAsync()
    {
        products = SliderType switch
        {
            "newest" => (await ProductService.GetNewestProductsAsync()).ToList(),
            "oldest" => (await ProductService.GetLowestPriceProductsAsync()).ToList(),
            _ => new()
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initSwiperSliders");
        }
    }

   
}
